// Copyright Â© 2023 OpenIM open source community. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package openim.chat;

import "common/common.proto";
import "sdkwss/sdkwss.proto";
import "wrapperspb/wrapperspb.proto";

option go_package = "github.com/openimsdk/chat/pkg/protocol/chat";

message onlineTime {
  string userID = 1;
  int64 timestamp = 3;
}

message getUsersTimeReq {
  repeated string userIDs = 2;
}

message getUsersTimeResp{
  repeated onlineTime timeList = 1;
}


message UserIdentity {
  string address = 1;
  string deviceID = 2;
  int32 platform = 3;
  string account = 4;
}

message UpdateUserInfoReq {
  string userID = 1;
  openim.protobuf.StringValue account = 2;
  openim.protobuf.StringValue nickname = 3;
  openim.protobuf.StringValue faceURL = 4;
  openim.protobuf.StringValue coverURL = 5;
  openim.protobuf.StringValue about = 6;
  openim.protobuf.Int32Value allowAddFriend = 7;
  openim.protobuf.Int32Value allowBeep = 8;
  openim.protobuf.Int32Value allowVibration = 9;
  openim.protobuf.Int32Value globalRecvMsgOpt = 10;
  openim.protobuf.Int32Value RegisterType = 11;
}

message UpdateUserInfoResp {
  string account = 1;
  string nickName = 2;
  openim.protobuf.StringValue faceURL = 3;
  openim.protobuf.StringValue coverURL = 4;
  openim.protobuf.StringValue about = 5;
}

message FindUserPublicInfoReq {
  repeated string userIDs = 1;
}

message FindUserPublicInfoRespOfOne {
  openim.common.UserPublicInfo user = 1;
}

message FindUserPublicInfoResp {
  repeated openim.common.UserPublicInfo users = 1;
}

message SearchUserPublicInfoReq {
  string keyword = 1;
  openim.sdkwss.RequestPagination pagination = 2;
  int32 genders = 3;
}

message SearchUserPublicInfoResp {
  uint32 total = 1;
  repeated openim.common.UserPublicInfo users = 2;
}

message FindUserFullInfoReq {
  repeated string userIDs = 1;
}

message FindUserFullInfoResp {
  repeated openim.common.UserFullInfo users = 1;
}

message GetAllUserIDsReq {
}

message GetAllUserIDsResp {
  repeated string userIDs = 1;
}

message SendVerifyCodeReq {
  int32 usedFor = 1;
  string ip = 2;
  string invitationCode = 3;
  string deviceID = 4;
  int32 platform = 5;
  string areaCode = 6;
  string phoneNumber = 7;
  string email = 8;
}

message SendVerifyCodeResp {}

message VerifyCodeReq {
  string areaCode = 1;
  string phoneNumber = 2;
  string verifyCode = 3;
  string email = 4;
}

message VerifyCodeResp {}

message ChallengeNonceReq {
  string publicKey = 1;
}

message ChallengeNonceResp {
  string nonce = 1;
}

message RegisterUserInfo {
  string userID = 1;
  string nickname = 2;
  string faceURL = 3;
  string account = 4;
  string publicKey = 5;
  string Address = 6;
  int32 RegisterType = 7;
}

message RegisterUserReq {
  string nonce = 6;
  string signature = 7;
  string ip = 1;
  string deviceID = 2;
  int32 platform = 3;
  bool autoLogin = 4;
  RegisterUserInfo user = 5;
}

message RegisterUserResp {
  string userID = 1;
  string chatToken = 3;
}

message AddUserAccountReq {
  string ip = 1;
  string deviceID = 2;
  int32 platform = 3;
  RegisterUserInfo user = 4;
}

message AddUserAccountResp {}

message LoginReq {
  string address = 1;
  int32 platform = 2;
  string deviceID = 3;
  string ip = 4;
  string nonce = 5;
  string signature = 6;
  string publicKey = 7;
}

message ResetPasswordReq {
  string areaCode = 1;
  string phoneNumber = 2;
  string verifyCode = 3;
  string password = 4;
  string email = 5;
}

message ResetPasswordResp {}

message ChangePasswordReq {
  string userID = 1;
  string currentPassword = 2;
  string newPassword = 3;
}

message ChangePasswordResp {}

message FindUserAccountReq {
  repeated string userIDs = 1;
}

message FindUserByAddressOrAccountReq {
  string address = 1;
  string account = 2;
}

message FindUserAccountResp {
  map<string, string> userAccountMap = 1; // userID  account
}

message FindAccountUserReq {
  repeated string accounts = 1;
}

message FindAccountUserResp {
  map<string, string> accountUserMap = 1; // account  userID
}

message SignalRecord {
  string fileName = 1;
  string mediaType = 2;
  string roomType = 3;
  string senderID = 4;
  string senderNickname = 5;
  string recvID = 6;
  string recvNickname = 7;
  string groupID = 8;
  string groupName = 9;
  repeated openim.common.UserPublicInfo inviterUserList = 10;
  int32 duration = 11;
  int64 createTime = 12;
  string size = 13;
  string downloadURL = 14;
}

message OpenIMCallbackReq {
  string command = 1;
  string body = 2;
}

message OpenIMCallbackResp {
  int32 actionCode = 1;
  int32 errCode = 2;
  int32 nextCode = 3;
  string errMsg = 4;
  string errDlt= 5;

  string sendID = 6;
  string callbackCommand = 7;
  string serverMsgID = 8;
  string clientMsgID = 9;
  int32 senderPlatformID = 10;
  string senderNickname = 11;
  int32 sessionType = 12;
  int32 msgFrom = 13;
  int32 contentType = 14;
  int32 status = 15;
  int64 createTime = 16;
  string content = 17;
  int32 seq = 18;
  repeated string atUserList = 19;
  string faceURL = 20;
  string ex = 21;
}

message SearchUserFullInfoReq {
  string keyword = 1;
  openim.sdkwss.RequestPagination pagination = 2;
  int32 genders = 3;
  int32 normal = 4;
}

message SearchUserFullInfoResp {
  uint32 total = 1;
  repeated openim.common.UserFullInfo users = 2;
}

message UserLoginCountReq {
  int64 start = 1;
  int64 end = 2;
}

message UserLoginCountResp {
  int64 loginCount = 1;
  int64 unloginCount = 2;
  map<string, int64> count = 3;
}

message LoginResp {
  string chatToken = 2;
  string userID = 3;
}

message SearchUserInfoReq {
  string keyword = 1;
  openim.sdkwss.RequestPagination pagination = 2;
  repeated int32 genders = 3;
  repeated string userIDs = 4;
}

message SearchUserInfoResp {
  uint32 total = 1;
  repeated openim.common.UserFullInfo users = 2;
}

message GetTokenForVideoMeetingReq {
  string room = 1;
  string identity = 2;
}

message GetTokenForVideoMeetingResp {
  string serverUrl = 1;
  string token = 2;
}

message CheckUserExistReq {
  RegisterUserInfo user = 1;
}

message CheckUserExistResp {
  string userid = 1;
  bool isRegistered = 2;
}

message DelUserAccountReq {
  repeated string userIDs = 1;
}
message DelUserAccountResp {}


message getGroupFromContactReq{
}


message getGroupFromContactResp{
  repeated string groupIDs = 1;
}

message saveGroupToContactReq{
  repeated string groupIDs = 1;
}

message saveGroupToContactResp{

}

message deleteGroupFromContactReq{
  repeated string groupIDs = 1;
}

message deleteGroupFromContactResp{
  
}

message DeleteGroupApplicationFromRecipientReq {

}

message DeleteGroupApplicationFromRecipientResp {

}

message DeleteGroupApplicationFromApplicantReq {

}

message DeleteGroupApplicationFromApplicantResp {
  
}

message DeleteGroupApplicationFromAlltReq {

}

message DeleteGroupApplicationFromAllResp {
  
}

message Post{
  string postID = 1;
  string userID = 2;
  string content = 3;
  int64 commentCount = 4;
  int64 forwardCount = 5;
  int64 likeCount = 6;
  int32 allowComment = 7;
  int32 allowForward = 8;
  int32 isLiked = 9;
  int32 isCollected = 10;
  int32 isForwarded = 11;
  int64 createTime = 12;
  int64 updateTime = 13;
  repeated string atUserIds = 14;
  openim.common.UserPublicInfo userInfo = 15;
  repeated openim.common.PostMedia mediaMsgs = 16;
  repeated openim.common.UserPublicInfo atUserInfoList = 17;
  string forwardPostID = 18;
  string commentPostID = 19;
  string refPostID = 20;
  Post forwardPost = 21;
  Post commentPost = 22;
  Post refPost = 23;
  int32 isPinned = 24;
  int32 isCommented = 25;
}

message PublishPostReq {
  openim.protobuf.StringValue content = 1;
  int32 allowComment = 2;
  int32 allowForward = 3;
  repeated string atUserIds = 4;
  repeated openim.common.PostMedia mediaMsgs = 5;
}

message PublishPostResp {
  Post post = 1;
}

message GetPostByIDReq {
  string postID = 1;
}

message GetPostByIDResp {
  Post post = 1;
}

message GetAllTypePostReq {
  int32 count = 1;
}

message GetAllTypePostResp {
  repeated TypePosts allPosts = 1;
}

message TypePosts {
  int32 type = 1;
  int64 nextCursor = 2;
  repeated Post posts = 3;
}

message GetPostListReq {
  int64 nextCursor = 1;
  int32 count = 2;
  int32 type = 3;
}

message GetPostListResp {
  int64 nextCursor = 1;
  repeated Post posts = 2;
}


message GetPostListByUserReq {
  string userID = 1;
  int64 nextCursor = 2;
  int32 count = 3;
}

message GetPostListByUserResp {
  int64 nextCursor = 1;
  repeated Post posts = 2;
}


message GetCommentPostListByPostIDReq {
  string postID = 1;
  int64 nextCursor = 2;
  int32 count = 3;
}

message GetCommentPostListByPostIDResp {
  int64 nextCursor = 1;
  repeated Post posts = 2;
}

message DeletePostReq {
  string postID = 1;
}



message DeletePostResp {
}

message ChangeAllowCommentPostReq {
  string postID = 1;
}

message ChangeAllowCommentPostResp {
  string postID = 1;
  int32 allowComment = 2;
}

message ChangeAllowForwardPostReq {
  string postID = 1;
}

message ChangeAllowForwardPostResp {
  string postID = 1;
  int32 allowForward = 2;
}

message LikePostReq {
  string postID = 1;
  int32  isLiked = 2;
}

message LikePostResp {
  int32 isLiked = 1;
}

message CollectPostReq {
  string postID = 1;
  int32  isCollected = 2;
}

message CollectPostResp {
  int32 isCollected = 1;
}

message ForwardPostReq {
  string forwardPostID = 1;
  int32 isForwarded = 2;
}

message ForwardPostResp {
  int32 isForwarded = 1;
}

message ReferencePostReq {
  string refPostID = 1;
  openim.protobuf.StringValue content = 2;
  int32 allowComment = 3;
  int32 allowForward = 4;
  repeated string atUserIds = 5;
  repeated openim.common.PostMedia mediaMsgs = 6;
}

message ReferencePostResp {
}

message CommentPostReq {
  string commentPostID = 1;
  openim.protobuf.StringValue content = 2;
  int32 allowComment = 3;
  int32 allowForward = 4; 
  repeated string atUserIds = 5;
  repeated openim.common.PostMedia mediaMsgs = 6;
}

message CommentPostResp {
  Post post = 1;
}

message PinPostReq {
  string postID = 1;
  int32 isPinned = 2;
}

message PinPostResp {
}


message CheckVersionReq {
  string language = 1;
}

message CheckVersionResp {
  string buildVersion = 1;
  string downloadURL = 2;
  string buildUpdateTitle = 3;
  string buildUpdateDescriptionTitle = 4;
  repeated string buildUpdateDescriptions = 5;
  bool needForceUpdate = 6;
}

message GetFakeUserReq {
}

message GetFakeUserResp {
  int32 online = 1;
  int32 total = 2;
}

service chat {
  // Edit personal information - called by the user or an administrator
  rpc UpdateUserInfo(UpdateUserInfoReq) returns (UpdateUserInfoResp);
  rpc AddUserAccount(AddUserAccountReq) returns (AddUserAccountResp);
  // Get user's public information - called by strangers
  rpc SearchUserPublicInfo(SearchUserPublicInfoReq) returns (SearchUserPublicInfoResp);
  rpc FindUserPublicInfo(FindUserPublicInfoReq) returns (FindUserPublicInfoResp);
  rpc FindUserByAddressOrAccount(FindUserByAddressOrAccountReq) returns (FindUserPublicInfoRespOfOne);
  // Search user information - called by administrators, other users get public fields
  rpc SearchUserFullInfo(SearchUserFullInfoReq) returns (SearchUserFullInfoResp);
  rpc FindUserFullInfo(FindUserFullInfoReq) returns (FindUserFullInfoResp);

  rpc SendVerifyCode(SendVerifyCodeReq) returns (SendVerifyCodeResp);
  rpc VerifyCode(VerifyCodeReq) returns (VerifyCodeResp);

  rpc ChallengeNonce( ChallengeNonceReq) returns (ChallengeNonceResp);
  rpc RegisterUser(RegisterUserReq) returns (RegisterUserResp);
  rpc Login(LoginReq) returns (LoginResp);
  rpc ResetPassword(ResetPasswordReq) returns (ResetPasswordResp);
  rpc ChangePassword(ChangePasswordReq) returns (ChangePasswordResp);
  rpc CheckUserExist(CheckUserExistReq) returns (CheckUserExistResp);
  rpc DelUserAccount(DelUserAccountReq) returns (DelUserAccountResp);

  rpc FindUserAccount(FindUserAccountReq) returns (FindUserAccountResp);
  rpc FindAccountUser(FindAccountUserReq) returns (FindAccountUserResp);
  rpc OpenIMCallback(OpenIMCallbackReq) returns (OpenIMCallbackResp);

  // Statistics
  rpc UserLoginCount(UserLoginCountReq) returns (UserLoginCountResp);

  rpc SearchUserInfo(SearchUserInfoReq) returns (SearchUserInfoResp);

  // Audio/video call and video meeting
  rpc GetTokenForVideoMeeting(GetTokenForVideoMeetingReq) returns (GetTokenForVideoMeetingResp);


  //ä¿å­ç¾¤ç»è³èç³»åè¡¨
  rpc saveGroupToContact(saveGroupToContactReq) returns (saveGroupToContactResp);
  //ä»èç³»åè¡¨ç§»é¤ç¾¤ç»
  rpc deleteGroupFromContact(deleteGroupFromContactReq) returns (deleteGroupFromContactResp);
  //ä»èç³»åè¡¨è·åç¾¤ç»
  rpc getGroupFromContact(getGroupFromContactReq) returns (getGroupFromContactResp);
  // å é¤ç¨æ·çå ç¾¤ç³è¯·
  rpc deleteUserGroupApplicationFromRecipient(DeleteGroupApplicationFromRecipientReq) returns (DeleteGroupApplicationFromRecipientResp);
  // å é¤ç¨æ·èªå·±çå ç¾¤ç³è¯·
  rpc deleteUserGroupApplicationFromApplicant(DeleteGroupApplicationFromApplicantReq) returns (DeleteGroupApplicationFromApplicantResp);
  // å é¤ææå³äºèªå·±çå ç¾¤ç³è¯·
  rpc deleteUserGroupApplicationFromAll(DeleteGroupApplicationFromAlltReq) returns (DeleteGroupApplicationFromAllResp);
  // è·åææç¨æ·id
  rpc getAllUserIDs(GetAllUserIDsReq) returns (GetAllUserIDsResp);


  // åå¸å¸å­ 
  rpc PublishPost(PublishPostReq) returns (PublishPostResp);
  // è·åææå¸å­ç±»å
  rpc GetAllTypePost(GetAllTypePostReq) returns (GetAllTypePostResp);
  // è·åå¸å­åè¡¨
  rpc GetPostList(GetPostListReq) returns (GetPostListResp);
  // è·åå¸å­åè¡¨(ç¨æ·)
  rpc GetPostListByUser(GetPostListByUserReq) returns (GetPostListByUserResp);
  // è·åè¯è®ºå¸å­åè¡¨
  rpc GetCommentPostListByPostID(GetCommentPostListByPostIDReq) returns (GetCommentPostListByPostIDResp);
  // è·åå¸å­è¯¦æ
  rpc GetPostByID(GetPostByIDReq) returns (GetPostByIDResp);
  // å é¤å¸å­
  rpc DeletePost(DeletePostReq) returns (DeletePostResp);
  // ä¿®æ¹å¸å­åè®¸è¯è®º
  rpc ChangeAllowCommentPost(ChangeAllowCommentPostReq) returns (ChangeAllowCommentPostResp);
  // ä¿®æ¹å¸å­åè®¸è½¬å
  rpc ChangeAllowForwardPost(ChangeAllowForwardPostReq) returns (ChangeAllowForwardPostResp);
  // ç¹èµå¸å­
  rpc ChangeLikePost(LikePostReq) returns (LikePostResp);
  // æ¶èå¸å­
  rpc ChangeCollectPost(CollectPostReq) returns (CollectPostResp);
  // ç½®é¡¶å¸å­
  rpc PinPost(PinPostReq) returns (PinPostResp);
  // è½¬åå¸å­
  rpc ForwardPost(ForwardPostReq) returns (ForwardPostResp);
  // è¯è®ºå¸å­
  rpc CommentPost(CommentPostReq) returns (CommentPostResp);
  // å¼ç¨å¸å­
  rpc ReferencePost(ReferencePostReq) returns (ReferencePostResp);
  // æ£æ¥çæ¬
  rpc CheckVersion(CheckVersionReq) returns (CheckVersionResp);
  // è·ååç¨æ·
  rpc GetFakeUser(GetFakeUserReq) returns (GetFakeUserResp);
}
