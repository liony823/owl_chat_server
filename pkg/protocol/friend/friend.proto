// Copyright © 2023 OpenIM. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package openim.friend;
import "sdkwss/sdkwss.proto";
import "wrapperspb/wrapperspb.proto";
option go_package = "github.com/openimsdk/chat/pkg/protocol/friend";

message getPaginationFriendsReq{
  openim.sdkws.RequestPagination pagination = 1;
  string userID = 2;
}
message getPaginationFriendsResp{
  repeated openim.sdkws.FriendInfo friendsInfo = 1;
  int32 total = 2;
}


message applyToAddFriendReq{
  string fromUserID = 1;
  string toUserID = 2;
  string reqMsg = 3;
  string remark = 4;
  string ex = 5;
}
message applyToAddFriendResp{
}


message importFriendReq{
  string ownerUserID = 1;
  repeated string friendUserIDs = 2;
}

message importFriendResp{
}


message getPaginationFriendsApplyToReq{
  string userID = 1;
  openim.sdkws.RequestPagination pagination = 2;

}
message getPaginationFriendsApplyToResp{
  repeated openim.sdkws.FriendRequest FriendRequests = 1;
  int32 total = 2;
}

message getDesignatedFriendsApplyReq{
  string fromUserID = 1;
  string toUserID = 2;
}

message getDesignatedFriendsApplyResp{
  repeated openim.sdkws.FriendRequest friendRequests = 1;
}


message getDesignatedFriendsReq{
  string ownerUserID = 1;
  repeated string friendUserIDs = 2;
}
message getDesignatedFriendsResp{
  repeated openim.sdkws.FriendInfo friendsInfo = 1;
}

message addBlackReq{
  string ownerUserID = 1;
  string blackUserID = 2;
  string ex = 3;
}
message addBlackResp{
}


message removeBlackReq{
  string ownerUserID = 1;
  string blackUserID = 2;
}
message removeBlackResp{
}

message getPaginationBlacksReq{
  string userID = 1;
  openim.sdkws.RequestPagination pagination = 2;
}
message getPaginationBlacksResp{
  repeated openim.sdkws.BlackInfo blacks = 1;
  int32 total = 2;
}


message isFriendReq{
  string userID1 = 1;
  string userID2 = 2;
}
message isFriendResp{
  bool inUser1Friends = 1; //如果userID2在userID1的好友列表中 true
  bool inUser2Friends = 2; //如果userID1在userID2的好友列表中 true
}


message isBlackReq{
  string userID1 = 1;
  string userID2 = 2;
}
message isBlackResp{
  bool inUser1Blacks = 1; //如果userID2在userID1的黑名单列表中 true
  bool inUser2Blacks = 2; //如果userID1在userID2的黑名单列表中 true
}


message deleteFriendReq{
  string ownerUserID = 1;
  string friendUserID = 2;
}
message deleteFriendResp{
}

//process
message respondFriendApplyReq{
  string fromUserID = 1; //主动发起的申请者
  string toUserID = 2;   //被动添加者
  int32  handleResult = 3;
  string handleMsg = 4;
}
message respondFriendApplyResp{
}

message updateFriendsReq{
  string ownerUserID = 1;
  repeated string friendUserIDs = 2;
  openim.protobuf.BoolValue isPinned = 3;
  openim.protobuf.StringValue remark = 4;
  openim.protobuf.StringValue ex = 5;
}
message updateFriendsResp{

}

message setFriendRemarkReq{
  string ownerUserID = 1;
  string friendUserID = 2;
  string remark = 3;
}
message setFriendRemarkResp{
}

message getPaginationFriendsApplyFromReq{
  string userID = 1;
  openim.sdkws.RequestPagination pagination = 2;
}
message getPaginationFriendsApplyFromResp{
  repeated openim.sdkws.FriendRequest friendRequests = 1;
  int32 total = 2;
}

message getFriendIDsReq {
  string userID = 1;
}

message getFriendIDsResp {
  repeated string friendIDs = 1;
}

message getSpecifiedFriendsInfoReq {
  string ownerUserID = 1;
  repeated string userIDList = 2;
}

message getSpecifiedFriendsInfoInfo {
  openim.sdkws.UserInfo userInfo = 1;
  openim.sdkws.FriendInfo friendInfo = 2;
  openim.sdkws.BlackInfo blackInfo = 3;
}

message getSpecifiedFriendsInfoResp {
  repeated getSpecifiedFriendsInfoInfo infos = 1;
}

message getFriendHashReq {
  string userID = 1;
}

message getFriendHashResp {
  int64 total = 1;
  uint64 hash = 2;
  int64 num = 3;
}

message searchFriendsReq{
  string userID = 1;
  string keyword = 2;
  openim.sdkws.RequestPagination pagination = 3;
}

message searchFriendsResp{
  int64 total = 1;
  repeated openim.sdkws.FriendInfo friends = 2;
}


message incrSyncFriendsReq{
  string userID = 1;
  string versionID = 2;
  uint64 version = 3;
  uint64 idHash = 4;
}


message incrSyncFriendsResp{
  bool full = 1;
  repeated string sortUserIds = 2;
  repeated string deleteUserIds = 3;
  repeated string changeUserIds = 4;
  uint64 version = 5;
}

message followUserReq {
  string ownerUserID = 1;
  string relatedUserID = 2;
}

message followUserResp {
}

message unfollowUserReq {
  string ownerUserID = 1;
  string relatedUserID = 2;
}

message unfollowUserResp {
}

message subscribeUserReq {
  string ownerUserID = 1;
  string relatedUserID = 2;
}

message subscribeUserResp {
}

message unsubscribeUserReq {
  string ownerUserID = 1;
  string relatedUserID = 2;
}

message unsubscribeUserResp {
}

message getFollowerIDsReq {
  string userID = 1;
}

message getFollowerIDsResp {
  repeated string userIDs = 1;
}

message getSubscriberIDsReq {
  string userID = 1;
}

message getSubscriberIDsResp {
  repeated string userIDs = 1;
}


service friend{
  //申请加好友
  rpc applyToAddFriend(applyToAddFriendReq) returns(applyToAddFriendResp);
  //获取收到的好友申请列表
  rpc getPaginationFriendsApplyTo(getPaginationFriendsApplyToReq) returns(getPaginationFriendsApplyToResp);
  //获取主动发出去的好友申请列表
  rpc getPaginationFriendsApplyFrom(getPaginationFriendsApplyFromReq) returns(getPaginationFriendsApplyFromResp);
  //获取指定好友申请
  rpc getDesignatedFriendsApply(getDesignatedFriendsApplyReq) returns(getDesignatedFriendsApplyResp);

  //添加黑名单
  rpc addBlack(addBlackReq) returns(addBlackResp);
  //移除黑名单
  rpc removeBlack(removeBlackReq) returns(removeBlackResp);
  //判断是否好友关系
  rpc isFriend(isFriendReq) returns(isFriendResp);
  //判断是否在黑名单中
  rpc isBlack(isBlackReq) returns(isBlackResp);
  //获取黑名单列表
  rpc getPaginationBlacks(getPaginationBlacksReq) returns(getPaginationBlacksResp);
  //删除好友
  rpc deleteFriend(deleteFriendReq) returns(deleteFriendResp);
  //对好友申请响应（同意或拒绝）
  rpc respondFriendApply(respondFriendApplyReq) returns(respondFriendApplyResp);
  //星标好友
  rpc updateFriends(updateFriendsReq) returns(updateFriendsResp);
  //设置好友备注
  rpc setFriendRemark(setFriendRemarkReq) returns(setFriendRemarkResp);
  //导入好友关系
  rpc importFriends(importFriendReq)  returns(importFriendResp);
  //翻页获取好友列表 无结果不返回错误
  rpc getDesignatedFriends(getDesignatedFriendsReq) returns(getDesignatedFriendsResp);
  //获取指定好友信息 有id不存在也返回错误
  rpc getPaginationFriends(getPaginationFriendsReq) returns (getPaginationFriendsResp);
  // 获取好友ID列表
  rpc getFriendIDs(getFriendIDsReq) returns (getFriendIDsResp);
  // 获取指定好友信息
  rpc GetSpecifiedFriendsInfo(getSpecifiedFriendsInfoReq) returns (getSpecifiedFriendsInfoResp);
  // 获取好友列表hash
  rpc getFriendHash(getFriendHashReq) returns (getFriendHashResp);

  rpc searchFriends(searchFriendsReq)returns (searchFriendsResp);

  rpc incrSyncFriends(incrSyncFriendsReq) returns (incrSyncFriendsResp);
}